
pwmm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000340  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000340  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000354  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000354  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002a3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000d4  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000203b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00020400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f2d  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000425  00000000  00000000  00021365  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c1a  00000000  00000000  0002178a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000253a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00025420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000328 	.word	0x08000328

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000328 	.word	0x08000328

08000108 <main>:
Tim_t *Tim2 = (Tim_t *)TIM_ADDR;
Gpio_t *gpioA = (Gpio_t *)GPIOA_ADDR;
#define NVIC 0xE000E100
#define pulse 0xf
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0

	uint32_t *Rcc1 = (uint32_t *)RCC_ENGPIO_ADDR;
 800010e:	4b48      	ldr	r3, [pc, #288]	; (8000230 <main+0x128>)
 8000110:	60fb      	str	r3, [r7, #12]
	uint32_t *Rcc2 = (uint32_t *)RCC_ENTIM2_ADDR;
 8000112:	4b48      	ldr	r3, [pc, #288]	; (8000234 <main+0x12c>)
 8000114:	60bb      	str	r3, [r7, #8]
	uint32_t *Nvic_iser = (uint32_t *)NVIC;
 8000116:	4b48      	ldr	r3, [pc, #288]	; (8000238 <main+0x130>)
 8000118:	607b      	str	r3, [r7, #4]
	uint32_t *pISPR = (uint32_t*)0xE000E200;
 800011a:	4b48      	ldr	r3, [pc, #288]	; (800023c <main+0x134>)
 800011c:	603b      	str	r3, [r7, #0]
	*Rcc1 |= 1<<17;
 800011e:	68fb      	ldr	r3, [r7, #12]
 8000120:	681b      	ldr	r3, [r3, #0]
 8000122:	2280      	movs	r2, #128	; 0x80
 8000124:	0292      	lsls	r2, r2, #10
 8000126:	431a      	orrs	r2, r3
 8000128:	68fb      	ldr	r3, [r7, #12]
 800012a:	601a      	str	r2, [r3, #0]
	*Rcc1 |= 1<<19;
 800012c:	68fb      	ldr	r3, [r7, #12]
 800012e:	681b      	ldr	r3, [r3, #0]
 8000130:	2280      	movs	r2, #128	; 0x80
 8000132:	0312      	lsls	r2, r2, #12
 8000134:	431a      	orrs	r2, r3
 8000136:	68fb      	ldr	r3, [r7, #12]
 8000138:	601a      	str	r2, [r3, #0]
	*Rcc2 |= 1;
 800013a:	68bb      	ldr	r3, [r7, #8]
 800013c:	681b      	ldr	r3, [r3, #0]
 800013e:	2201      	movs	r2, #1
 8000140:	431a      	orrs	r2, r3
 8000142:	68bb      	ldr	r3, [r7, #8]
 8000144:	601a      	str	r2, [r3, #0]

	gpioA->mode &= ~(0x3);
 8000146:	4b3e      	ldr	r3, [pc, #248]	; (8000240 <main+0x138>)
 8000148:	681b      	ldr	r3, [r3, #0]
 800014a:	681a      	ldr	r2, [r3, #0]
 800014c:	4b3c      	ldr	r3, [pc, #240]	; (8000240 <main+0x138>)
 800014e:	681b      	ldr	r3, [r3, #0]
 8000150:	2103      	movs	r1, #3
 8000152:	438a      	bics	r2, r1
 8000154:	601a      	str	r2, [r3, #0]
	gpioA->mode |= 2;
 8000156:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <main+0x138>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	4b38      	ldr	r3, [pc, #224]	; (8000240 <main+0x138>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	2102      	movs	r1, #2
 8000162:	430a      	orrs	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
	gpioA->afrl |= 2;
 8000166:	4b36      	ldr	r3, [pc, #216]	; (8000240 <main+0x138>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	6a1a      	ldr	r2, [r3, #32]
 800016c:	4b34      	ldr	r3, [pc, #208]	; (8000240 <main+0x138>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2102      	movs	r1, #2
 8000172:	430a      	orrs	r2, r1
 8000174:	621a      	str	r2, [r3, #32]
	gpioC->mode |= (1<<12);
 8000176:	4b33      	ldr	r3, [pc, #204]	; (8000244 <main+0x13c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4b31      	ldr	r3, [pc, #196]	; (8000244 <main+0x13c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2180      	movs	r1, #128	; 0x80
 8000182:	0149      	lsls	r1, r1, #5
 8000184:	430a      	orrs	r2, r1
 8000186:	601a      	str	r2, [r3, #0]
//	gpioC->odr |= (1<<6);

	Tim2->CNT = 0;
 8000188:	4b2f      	ldr	r3, [pc, #188]	; (8000248 <main+0x140>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2200      	movs	r2, #0
 800018e:	625a      	str	r2, [r3, #36]	; 0x24
	Tim2->PSC &= ~(0xffff);
 8000190:	4b2d      	ldr	r3, [pc, #180]	; (8000248 <main+0x140>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000196:	4b2c      	ldr	r3, [pc, #176]	; (8000248 <main+0x140>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	0412      	lsls	r2, r2, #16
 800019e:	629a      	str	r2, [r3, #40]	; 0x28
    Tim2->PSC |= (100);
 80001a0:	4b29      	ldr	r3, [pc, #164]	; (8000248 <main+0x140>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001a6:	4b28      	ldr	r3, [pc, #160]	; (8000248 <main+0x140>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2164      	movs	r1, #100	; 0x64
 80001ac:	430a      	orrs	r2, r1
 80001ae:	629a      	str	r2, [r3, #40]	; 0x28
    Tim2->ARR &= ~(0xffffffff);
 80001b0:	4b25      	ldr	r3, [pc, #148]	; (8000248 <main+0x140>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	62da      	str	r2, [r3, #44]	; 0x2c
    Tim2->ARR |= (0xff);
 80001b8:	4b23      	ldr	r3, [pc, #140]	; (8000248 <main+0x140>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001be:	4b22      	ldr	r3, [pc, #136]	; (8000248 <main+0x140>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	21ff      	movs	r1, #255	; 0xff
 80001c4:	430a      	orrs	r2, r1
 80001c6:	62da      	str	r2, [r3, #44]	; 0x2c
    Tim2->CCR1 = pulse;
 80001c8:	4b1f      	ldr	r3, [pc, #124]	; (8000248 <main+0x140>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	220f      	movs	r2, #15
 80001ce:	635a      	str	r2, [r3, #52]	; 0x34

    Tim2->CCER |= 1;
 80001d0:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <main+0x140>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	6a1a      	ldr	r2, [r3, #32]
 80001d6:	4b1c      	ldr	r3, [pc, #112]	; (8000248 <main+0x140>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2101      	movs	r1, #1
 80001dc:	430a      	orrs	r2, r1
 80001de:	621a      	str	r2, [r3, #32]
    Tim2->CCMR1 |= (3<<4);
 80001e0:	4b19      	ldr	r3, [pc, #100]	; (8000248 <main+0x140>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	699a      	ldr	r2, [r3, #24]
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <main+0x140>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2130      	movs	r1, #48	; 0x30
 80001ec:	430a      	orrs	r2, r1
 80001ee:	619a      	str	r2, [r3, #24]
    Tim2->CR1 |= 1;
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <main+0x140>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <main+0x140>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2101      	movs	r1, #1
 80001fc:	430a      	orrs	r2, r1
 80001fe:	601a      	str	r2, [r3, #0]
    Tim2->DIER |= 3;
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <main+0x140>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	68da      	ldr	r2, [r3, #12]
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <main+0x140>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2103      	movs	r1, #3
 800020c:	430a      	orrs	r2, r1
 800020e:	60da      	str	r2, [r3, #12]

	*pISPR |= 1<<15;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2280      	movs	r2, #128	; 0x80
 8000216:	0212      	lsls	r2, r2, #8
 8000218:	431a      	orrs	r2, r3
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]
	*Nvic_iser |= 1<<15;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	0212      	lsls	r2, r2, #8
 8000226:	431a      	orrs	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
	while(1);
 800022c:	e7fe      	b.n	800022c <main+0x124>
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	40021014 	.word	0x40021014
 8000234:	4002101c 	.word	0x4002101c
 8000238:	e000e100 	.word	0xe000e100
 800023c:	e000e200 	.word	0xe000e200
 8000240:	20000008 	.word	0x20000008
 8000244:	20000000 	.word	0x20000000
 8000248:	20000004 	.word	0x20000004

0800024c <TIM2_IRQHandler>:
}
//while(1){
void TIM2_IRQHandler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
//	if((Tim2->SR & 2) == 2)
//	{
 		Tim2->SR &= ~(3);
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <TIM2_IRQHandler+0x3c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	691a      	ldr	r2, [r3, #16]
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <TIM2_IRQHandler+0x3c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2103      	movs	r1, #3
 800025c:	438a      	bics	r2, r1
 800025e:	611a      	str	r2, [r3, #16]
//		gpioC->odr ^= (1<<6);
		Tim2->CCR1 = (Tim2->CCR1 +pulse);
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <TIM2_IRQHandler+0x3c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <TIM2_IRQHandler+0x3c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	320f      	adds	r2, #15
 800026c:	635a      	str	r2, [r3, #52]	; 0x34
		if(Tim2->CCR1 > 0xff)
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <TIM2_IRQHandler+0x3c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000274:	2bff      	cmp	r3, #255	; 0xff
 8000276:	d903      	bls.n	8000280 <TIM2_IRQHandler+0x34>
		{
			Tim2->CCR1 = pulse;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <TIM2_IRQHandler+0x3c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	220f      	movs	r2, #15
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
		}
//////		gpioA->odr ^/= (1);
//	}
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000004 	.word	0x20000004

0800028c <Reset_Handler>:
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
 800028e:	4685      	mov	sp, r0
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x6>)
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopForever+0xa>)
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopForever+0xe>)
 8000296:	2300      	movs	r3, #0
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:
 800029a:	58d4      	ldr	r4, [r2, r3]
 800029c:	50c4      	str	r4, [r0, r3]
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:
 80002a0:	18c4      	adds	r4, r0, r3
 80002a2:	428c      	cmp	r4, r1
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopForever+0x12>)
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopForever+0x16>)
 80002aa:	2300      	movs	r3, #0
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:
 80002ae:	6013      	str	r3, [r2, #0]
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:
 80002b2:	42a2      	cmp	r2, r4
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>
 80002b6:	e000      	b.n	80002ba <LoopFillZerobss+0x8>
 80002b8:	bf00      	nop
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
 80002be:	f7ff ff23 	bl	8000108 <main>

080002c2 <LoopForever>:
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
 80002c4:	20004000 	.word	0x20004000
 80002c8:	20000000 	.word	0x20000000
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	08000348 	.word	0x08000348
 80002d4:	2000000c 	.word	0x2000000c
 80002d8:	20000028 	.word	0x20000028

080002dc <ADC_COMP_IRQHandler>:
 80002dc:	e7fe      	b.n	80002dc <ADC_COMP_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2600      	movs	r6, #0
 80002e4:	4d0c      	ldr	r5, [pc, #48]	; (8000318 <__libc_init_array+0x38>)
 80002e6:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e8:	1b64      	subs	r4, r4, r5
 80002ea:	10a4      	asrs	r4, r4, #2
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	2600      	movs	r6, #0
 80002f2:	f000 f819 	bl	8000328 <_init>
 80002f6:	4d0a      	ldr	r5, [pc, #40]	; (8000320 <__libc_init_array+0x40>)
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <__libc_init_array+0x44>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	00b3      	lsls	r3, r6, #2
 8000306:	58eb      	ldr	r3, [r5, r3]
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	00b3      	lsls	r3, r6, #2
 8000310:	58eb      	ldr	r3, [r5, r3]
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
