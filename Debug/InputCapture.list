
InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a0  080002a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a0  080002a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002a0  080002a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a0  080002a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a0  080002a0  000102a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080002ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002ac  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002a0  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000bc  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00020388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000203d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f4b  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000041a  00000000  00000000  0002134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003c7d  00000000  00000000  00021765  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000253e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000005c  00000000  00000000  00025460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000288 	.word	0x08000288

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000288 	.word	0x08000288

08000108 <main>:
#define NVIC 0xE000E100
#define pulse 0xf
#define LSEON 1
#define LSERDY 2
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b086      	sub	sp, #24
 800010c:	af00      	add	r7, sp, #0
	uint32_t *Rcc_cfgr = (uint32_t *)RCC_CFGR;
 800010e:	4b2f      	ldr	r3, [pc, #188]	; (80001cc <main+0xc4>)
 8000110:	617b      	str	r3, [r7, #20]
	uint32_t *pwr_cr1 = (uint32_t *)PWR;
 8000112:	4b2f      	ldr	r3, [pc, #188]	; (80001d0 <main+0xc8>)
 8000114:	613b      	str	r3, [r7, #16]
	uint32_t *Rcc1 = (uint32_t *)RCC_ENGPIO_ADDR;
 8000116:	4b2f      	ldr	r3, [pc, #188]	; (80001d4 <main+0xcc>)
 8000118:	60fb      	str	r3, [r7, #12]
	uint32_t *Rcc2 = (uint32_t *)RCC_ENTIM2_ADDR;
 800011a:	4b2f      	ldr	r3, [pc, #188]	; (80001d8 <main+0xd0>)
 800011c:	60bb      	str	r3, [r7, #8]
	uint32_t *Rcc_Bdcr = (uint32_t *)RCC_ADDR_BDCR;
 800011e:	4b2f      	ldr	r3, [pc, #188]	; (80001dc <main+0xd4>)
 8000120:	607b      	str	r3, [r7, #4]

	//Enable gpioA
	*Rcc1 |= 1<<17;
 8000122:	68fb      	ldr	r3, [r7, #12]
 8000124:	681b      	ldr	r3, [r3, #0]
 8000126:	2280      	movs	r2, #128	; 0x80
 8000128:	0292      	lsls	r2, r2, #10
 800012a:	431a      	orrs	r2, r3
 800012c:	68fb      	ldr	r3, [r7, #12]
 800012e:	601a      	str	r2, [r3, #0]
    // Enable tim2 and pwr
	*Rcc2 |= (1 | (1<<28));
 8000130:	68bb      	ldr	r3, [r7, #8]
 8000132:	681b      	ldr	r3, [r3, #0]
 8000134:	4a2a      	ldr	r2, [pc, #168]	; (80001e0 <main+0xd8>)
 8000136:	431a      	orrs	r2, r3
 8000138:	68bb      	ldr	r3, [r7, #8]
 800013a:	601a      	str	r2, [r3, #0]
    // Enable RTC domain write protection
	*pwr_cr1= 1<<8;
 800013c:	693b      	ldr	r3, [r7, #16]
 800013e:	2280      	movs	r2, #128	; 0x80
 8000140:	0052      	lsls	r2, r2, #1
 8000142:	601a      	str	r2, [r3, #0]

	// Enable lse and wait for it to get ready
	*Rcc_Bdcr |= LSEON;
 8000144:	687b      	ldr	r3, [r7, #4]
 8000146:	681b      	ldr	r3, [r3, #0]
 8000148:	2201      	movs	r2, #1
 800014a:	431a      	orrs	r2, r3
 800014c:	687b      	ldr	r3, [r7, #4]
 800014e:	601a      	str	r2, [r3, #0]
	while((*Rcc_Bdcr & LSERDY) == LSERDY);
 8000150:	46c0      	nop			; (mov r8, r8)
 8000152:	687b      	ldr	r3, [r7, #4]
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	2202      	movs	r2, #2
 8000158:	4013      	ands	r3, r2
 800015a:	d1fa      	bne.n	8000152 <main+0x4a>

	gpioA->mode &= ~(0x3);
 800015c:	4b21      	ldr	r3, [pc, #132]	; (80001e4 <main+0xdc>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <main+0xdc>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2103      	movs	r1, #3
 8000168:	438a      	bics	r2, r1
 800016a:	601a      	str	r2, [r3, #0]
	// TIM2 PIN MODE
	gpioA->mode |= 2;
 800016c:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <main+0xdc>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	681a      	ldr	r2, [r3, #0]
 8000172:	4b1c      	ldr	r3, [pc, #112]	; (80001e4 <main+0xdc>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2102      	movs	r1, #2
 8000178:	430a      	orrs	r2, r1
 800017a:	601a      	str	r2, [r3, #0]
	// MCO PINMODE PA8
	gpioA->mode |= (2<<16);
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <main+0xdc>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <main+0xdc>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2180      	movs	r1, #128	; 0x80
 8000188:	0289      	lsls	r1, r1, #10
 800018a:	430a      	orrs	r2, r1
 800018c:	601a      	str	r2, [r3, #0]
	// AF2 pa0
	gpioA->afrl |= 2;
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0xdc>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	6a1a      	ldr	r2, [r3, #32]
 8000194:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <main+0xdc>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2102      	movs	r1, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	621a      	str	r2, [r3, #32]
	// AF0 PA8
	gpioA->afrh &= ~(0xf);
 800019e:	4b11      	ldr	r3, [pc, #68]	; (80001e4 <main+0xdc>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001a4:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <main+0xdc>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	210f      	movs	r1, #15
 80001aa:	438a      	bics	r2, r1
 80001ac:	625a      	str	r2, [r3, #36]	; 0x24

	// Set MCO as LSE
	*Rcc_cfgr &= ~(0xf<<24);
 80001ae:	697b      	ldr	r3, [r7, #20]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <main+0xe0>)
 80001b4:	401a      	ands	r2, r3
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	601a      	str	r2, [r3, #0]
	*Rcc_cfgr |= (0x3<<24) | (0x1<<28);
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2298      	movs	r2, #152	; 0x98
 80001c0:	0552      	lsls	r2, r2, #21
 80001c2:	431a      	orrs	r2, r3
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	601a      	str	r2, [r3, #0]

	while(1);
 80001c8:	e7fe      	b.n	80001c8 <main+0xc0>
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	40021004 	.word	0x40021004
 80001d0:	40007000 	.word	0x40007000
 80001d4:	40021014 	.word	0x40021014
 80001d8:	4002101c 	.word	0x4002101c
 80001dc:	40021020 	.word	0x40021020
 80001e0:	10000001 	.word	0x10000001
 80001e4:	20000000 	.word	0x20000000
 80001e8:	f0ffffff 	.word	0xf0ffffff

080001ec <Reset_Handler>:
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
 80001ee:	4685      	mov	sp, r0
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <LoopForever+0x6>)
 80001f2:	490e      	ldr	r1, [pc, #56]	; (800022c <LoopForever+0xa>)
 80001f4:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <LoopForever+0xe>)
 80001f6:	2300      	movs	r3, #0
 80001f8:	e002      	b.n	8000200 <LoopCopyDataInit>

080001fa <CopyDataInit>:
 80001fa:	58d4      	ldr	r4, [r2, r3]
 80001fc:	50c4      	str	r4, [r0, r3]
 80001fe:	3304      	adds	r3, #4

08000200 <LoopCopyDataInit>:
 8000200:	18c4      	adds	r4, r0, r3
 8000202:	428c      	cmp	r4, r1
 8000204:	d3f9      	bcc.n	80001fa <CopyDataInit>
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <LoopForever+0x12>)
 8000208:	4c0b      	ldr	r4, [pc, #44]	; (8000238 <LoopForever+0x16>)
 800020a:	2300      	movs	r3, #0
 800020c:	e001      	b.n	8000212 <LoopFillZerobss>

0800020e <FillZerobss>:
 800020e:	6013      	str	r3, [r2, #0]
 8000210:	3204      	adds	r2, #4

08000212 <LoopFillZerobss>:
 8000212:	42a2      	cmp	r2, r4
 8000214:	d3fb      	bcc.n	800020e <FillZerobss>
 8000216:	e000      	b.n	800021a <LoopFillZerobss+0x8>
 8000218:	bf00      	nop
 800021a:	f000 f811 	bl	8000240 <__libc_init_array>
 800021e:	f7ff ff73 	bl	8000108 <main>

08000222 <LoopForever>:
 8000222:	e7fe      	b.n	8000222 <LoopForever>
 8000224:	20004000 	.word	0x20004000
 8000228:	20000000 	.word	0x20000000
 800022c:	20000004 	.word	0x20000004
 8000230:	080002a8 	.word	0x080002a8
 8000234:	20000004 	.word	0x20000004
 8000238:	20000020 	.word	0x20000020

0800023c <ADC_COMP_IRQHandler>:
 800023c:	e7fe      	b.n	800023c <ADC_COMP_IRQHandler>
	...

08000240 <__libc_init_array>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	2600      	movs	r6, #0
 8000244:	4d0c      	ldr	r5, [pc, #48]	; (8000278 <__libc_init_array+0x38>)
 8000246:	4c0d      	ldr	r4, [pc, #52]	; (800027c <__libc_init_array+0x3c>)
 8000248:	1b64      	subs	r4, r4, r5
 800024a:	10a4      	asrs	r4, r4, #2
 800024c:	42a6      	cmp	r6, r4
 800024e:	d109      	bne.n	8000264 <__libc_init_array+0x24>
 8000250:	2600      	movs	r6, #0
 8000252:	f000 f819 	bl	8000288 <_init>
 8000256:	4d0a      	ldr	r5, [pc, #40]	; (8000280 <__libc_init_array+0x40>)
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <__libc_init_array+0x44>)
 800025a:	1b64      	subs	r4, r4, r5
 800025c:	10a4      	asrs	r4, r4, #2
 800025e:	42a6      	cmp	r6, r4
 8000260:	d105      	bne.n	800026e <__libc_init_array+0x2e>
 8000262:	bd70      	pop	{r4, r5, r6, pc}
 8000264:	00b3      	lsls	r3, r6, #2
 8000266:	58eb      	ldr	r3, [r5, r3]
 8000268:	4798      	blx	r3
 800026a:	3601      	adds	r6, #1
 800026c:	e7ee      	b.n	800024c <__libc_init_array+0xc>
 800026e:	00b3      	lsls	r3, r6, #2
 8000270:	58eb      	ldr	r3, [r5, r3]
 8000272:	4798      	blx	r3
 8000274:	3601      	adds	r6, #1
 8000276:	e7f2      	b.n	800025e <__libc_init_array+0x1e>
 8000278:	080002a0 	.word	0x080002a0
 800027c:	080002a0 	.word	0x080002a0
 8000280:	080002a0 	.word	0x080002a0
 8000284:	080002a4 	.word	0x080002a4

08000288 <_init>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028e:	bc08      	pop	{r3}
 8000290:	469e      	mov	lr, r3
 8000292:	4770      	bx	lr

08000294 <_fini>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029a:	bc08      	pop	{r3}
 800029c:	469e      	mov	lr, r3
 800029e:	4770      	bx	lr
